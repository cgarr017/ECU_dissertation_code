


##NMDS plots
abund_table<-read.csv(">path_to_file<",row.names=1,check.names=FALSE)
#Transpose the data to have sample names on rows
abund_table<-t(abund_table)
#meta_table<-read.csv(">path_to_file<",row.names=1,check.names=FALSE)
#Just a check to ensure that the samples in meta_table are in the same order as in abund_table
#meta_table<-meta_table[rownames(abund_table),]
#Get grouping information
grouping_info<-data.frame(row.names=rownames(abund_table),t(as.data.frame(strsplit(rownames(abund_table),"_"))))
library(vegan)
#Get MDS stats
sol<-metaMDS(abund_table,distance = "bray", k = 2, trymax = 50)
 
#Make a new data frame, and put month, site, and sample_type information there, to be useful for coloring, and shape of points
NMDS=data.frame(x=sol$point[,1],y=sol$point[,2],Month=as.factor(grouping_info[,1]),Site=as.factor(grouping_info[,2]),Sample_Type=as.factor(grouping_info[,3]))
#Get spread of points based on site
plot.new()
ord<-ordiellipse(sol, as.factor(grouping_info[,3]) ,display = "sites", kind ="sd", conf = 0.95, label = T)
dev.off()
#Data frame df_ell contains values to show ellipses. It is calculated with function veganCovEllipse which is hidden in vegan package. This function is applied to each level of NMDS (group) and it uses also function cov.wt to calculate covariance matrix.
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100) 
{
  theta <- (0:npoints) * 2 * pi/npoints
  Circle <- cbind(cos(theta), sin(theta))
  t(center + scale * t(Circle %*% chol(cov)))
}
 
#Generate ellipse points
df_ell <- data.frame()
for(g in levels(NMDS$Sample_Type)){
  if(g!="" && (g %in% names(ord))){
 
    df_ell <- rbind(df_ell, cbind(as.data.frame(with(NMDS[NMDS$Sample_Type==g,],
                                                     veganCovEllipse(ord[[g]]$cov,ord[[g]]$center,ord[[g]]$scale)))
                                  ,Sample_Type=g), multivariate=FALSE)
  }
}
#Generate mean values from NMDS plot grouped on months
NMDS.mean=aggregate(NMDS[,1:2],list(group=NMDS$Sample_Type),mean)
#Now do the actual plotting
library(ggplot2)
 
shape_values<-seq(1,11)
 
p<-ggplot(data=NMDS,aes(x,y,colour=Sample_Type))+theme(text=element_text(size=16))+
  xlab(" ")+
  ylab(" ")+
  ggtitle("16S Community Analysis Class Level NMDS")+
  theme(plot.title = element_text(hjust = 0.5,face="bold"))
#p<-p+ annotate("text",x=NMDS.mean$x,y=NMDS.mean$y,label=NMDS.mean$group,size=6)
p<-p+ geom_path(data=df_ell, aes(x=NMDS1, y=NMDS2), size=2, linetype=2)
p<-p+geom_point(aes(), size=2)
#+geom_polygon(aes(fill=Sample_Type))
p
#pdf(">path_to_file<.pdf")
#print(p)
#dev.off()


#Diversity index value generating
library(vegan)
otu_table<-read.csv(">path_to_file<",header=T,row.names=1,check.names=FALSE)
#Transpose the data to have sample names on rows
otu_table<-t(otu_table)
data(otu_table)
H<-diversity(otu_table)
simp<-diversity(otu_table, "simpson")
invsimp<-diversity(otu_table, "inv")
## Unbiased Simpson (Hurlbert 1971, eq. 5) with rarefy:
unbias.simp <- rarefy(otu_table, 2) - 1
## Fisher alpha
alpha <- fisher.alpha(otu_table)
## Species richness (S) and Pielou's evenness (J):
S <- specnumber(otu_table)
J <- H/log(S)
## Plot all
pairs(cbind(H, simp, invsimp, unbias.simp, alpha), pch="+", col="blue")
alpha
write.table(J, "/Users/codygarrison/Desktop/pielou_evenness.txt", sep="\t")


#linear regress test for shannon diversity
library(tidyverse)
corrosion=read.csv(">path_to_file<")
glm1<-glm(Alpha_Diversity~Sal,family="gaussian",data=corrosion)
summary(glm1)
ggplot(data=corrosion,aes(x=Sal,y=Alpha_Diversity))+geom_point() +
  geom_smooth(method = "lm", se = FALSE)
plot(glm1)


##Boxplots of diversity indices
boxplot_data<-read.csv(">path_to_file<",row.names=1,check.names=FALSE)

q<-ggplot(data=boxplot_data,aes(x=Sample_Type,y=Alpha_Diversity))+theme(text=element_text(size=16))+
  geom_boxplot()
#+
#  ggtitle("16S Community Alpha Diversity")+
#  theme(plot.title = element_text(hjust = 0.5,face="bold"))

q<-q+geom_point(aes(), size=2)
q<-q+theme(axis.text.x=element_text(angle=70,vjust=0.5))

q
pdf("Shannon_16S_Alpha_Diversity_box_plot_new_all_biocorrosion_and_shipwreck.pdf")
print(q)
dev.off()


# independent 2-group Mann-Whitney U Test for non-normal distributions
corrosion_t=read.csv(">path_to_file<")
wilcox.test(gene~group, data=corrosion_t)


##Boxplot for glycoside hydrolase
library(tidyverse)
boxplot_data<-read.csv(">path_to_file<",row.names=1,check.names=FALSE)

q<-ggplot(data=boxplot_data,aes(x=Sample_Type,y=Glycoside_hydrolase))+theme(text=element_text(size=16))+
  geom_boxplot()+
  ggtitle("Distribution of Glycoside Hydrolase Gene")+
  theme(plot.title = element_text(hjust = 0.5,face="bold"))

q<-q+geom_point(aes(), size=2)

q<-q+theme(axis.text.x=element_text(angle=70,vjust=0.5))

q
pdf("MetaG_glycoside_hydrolase_boxplot.pdf")
print(q)

##ANOSIM test
library(tidyverse)
abund_table<-read.csv(">path_to_file<",row.names=1,check.names=FALSE)
#Transpose the data to have sample names on rows
abund_table<-t(abund_table)
#meta_table<-read.csv(">path_to_file<",row.names=1,check.names=FALSE)
#Just a check to ensure that the samples in meta_table are in the same order as in abund_table
#meta_table<-meta_table[rownames(abund_table),]
#Get grouping information
grouping_info<-data.frame(row.names=rownames(abund_table),t(as.data.frame(strsplit(rownames(abund_table),"_"))))
library(vegan)
#Get MDS stats
sol<-metaMDS(abund_table,distance = "bray", k = 2, trymax = 50)

#make community matrix - extract columns with abundance information, turn data frame into matrix
com = abund_table[,4:ncol(abund_table)]
m_com = as.matrix(com)
ano = anosim(m_com, grouping_info[,3], distance = "bray", permutations = 9999)
ano


###CCA plot
library(ggplot2)
library(vegan)
library(grid)
abund_table<-read.csv(">path_to_file<.csv",row.names=1,check.names=FALSE)
#Transpose the data to have sample names on rows
abund_table<-t(abund_table)
meta_table<-read.csv(">path_to_file<.csv",row.names=1,check.names=FALSE)
#Just a check to ensure that the samples in meta_table are in the same order as in abund_table
meta_table<-meta_table[rownames(abund_table),]

 
#Filter out any samples taxas that have zero entries 
#abund_table<-subset(abund_table,rowSums(abund_table)!=0)
 
#Convert to relative frequencies
abund_table<-abund_table/rowSums(abund_table)
 
#Use adonis to find significant environmental variables
abund_table.adonis <- adonis(abund_table ~ ., data=meta_table)

#Call:
#  adonis(formula = abund_table ~ ., data = meta_table) 
#Permutation: free
#Number of permutations: 999
#
#Terms added sequentially (first to last)
#
#Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)    
#pH          1    0.2600 0.26002  2.1347 0.01974  0.067 .  
#Temp        1    1.6542 1.65417 13.5806 0.12559  0.001 ***
#TS          1    0.8298 0.82983  6.8128 0.06300  0.001 ***
#VS          1    0.3143 0.31434  2.5807 0.02387  0.038 *  
#VFA         1    0.2280 0.22796  1.8715 0.01731  0.109    
#CODt        1    0.1740 0.17400  1.4285 0.01321  0.209    
#CODs        1    0.0350 0.03504  0.2877 0.00266  0.909    
#perCODsbyt  1    0.1999 0.19986  1.6409 0.01517  0.148    
#NH4         1    0.1615 0.16154  1.3262 0.01226  0.236    
#Prot        1    0.3657 0.36570  3.0024 0.02777  0.024 *  
#Carbo       1    0.5444 0.54439  4.4693 0.04133  0.003 ** 
#Residuals  69    8.4045 0.12180         0.63809           
#Total      80   13.1713                 1.00000           
#---
#  Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
 
#Extract the best variables
bestEnvVariables<-rownames(abund_table.adonis$aov.tab)[abund_table.adonis$aov.tab$"Pr(>F)"<=0.01]
 
#Last two are NA entries, so we have to remove them
bestEnvVariables<-bestEnvVariables[!is.na(bestEnvVariables)]
 
#We are now going to use only those environmental variables in cca that were found significant
#eval(parse(text=paste("sol <- cca(abund_table ~ ",do.call(paste,c(as.list(bestEnvVariables),sep=" + ")),",data=meta_table)",sep="")))
 
#You can use the following to use all the environmental variables
sol<-cca(abund_table ~ ., data=meta_table)
 
scrs<-scores(sol,display=c("sp","wa","lc","bp","cn"))
 
#Check the attributes
#attributes(scrs)
# $names
# [1] "species"     "sites"       "constraints" "biplot"     
# [5] "centroids"  
 
#Extract site data first
df_sites<-data.frame(scrs$sites,t(as.data.frame(strsplit(rownames(scrs$sites),"_"))))
colnames(df_sites)<-c("x","y","Month","Site","Sample_Type")
 
#Draw sites
p<-ggplot()
p<-p+geom_point(data=df_sites,aes(x,y,colour=Sample_Type,size=20))+ guides(colour = guide_legend(override.aes = list(size=10)))
 
#Draw biplots
multiplier <- vegan:::ordiArrowMul(scrs$biplot)
 
# Reference: http://www.inside-r.org/packages/cran/vegan/docs/envfit
# The printed output of continuous variables (vectors) gives the direction cosines 
# which are the coordinates of the heads of unit length vectors. In plot these are 
# scaled by their correlation (square root of the column r2) so that "weak" predictors 
# have shorter arrows than "strong" predictors. You can see the scaled relative lengths 
# using command scores. The plotted (and scaled) arrows are further adjusted to the 
# current graph using a constant multiplier: this will keep the relative r2-scaled 
# lengths of the arrows but tries to fill the current plot. You can see the multiplier 
# using vegan:::ordiArrowMul(result_of_envfit), and set it with the argument arrow.mul. 
 
df_arrows<- scrs$biplot*multiplier
colnames(df_arrows)<-c("x","y")
df_arrows=as.data.frame(df_arrows)
 
p<-p+geom_segment(data=df_arrows, aes(x = 0, y = 0, xend = x, yend = y),
                 arrow = arrow(length = unit(0.2, "cm")),color="#808080",alpha=0.5,size=4)
 
#p<-p+geom_text(data=as.data.frame(df_arrows*1.1),aes(x, y, label = rownames(df_arrows)),color="#808080",alpha=0.5)
 
# Draw species
df_species<- as.data.frame(scrs$species)
colnames(df_species)<-c("x","y")
 
# Either choose text or points
#p<-p+geom_text(data=df_species,aes(x,y,label=rownames(df_species)))
#p<-p+geom_point(data=df_species,aes(x,y,shape="Species"))+scale_shape_manual("",values=2)
 
p<-p+theme_bw()
p<-p+theme(text=element_text(size=28))
pdf("revised_CCA_all_biocorrosion_and_shipwreck_no_labels_3levels_of_substrate.pdf",width=16,height=12)
print(p)
dev.off()
abund_table.adonis
p

##Taxa plot
abund_table<-read.csv(">path_to_file<.csv",row.names=1,check.names=FALSE)
#Transpose the data to have sample names on rows
abund_table<-t(abund_table)
meta_table<-read.csv(">path_to_file<.csv",row.names=1,check.names=FALSE)
#Just a check to ensure that the samples in meta_table are in the same order as in abund_table
meta_table<-meta_table[rownames(abund_table),]
#Get grouping information
grouping_info<-data.frame(row.names=rownames(abund_table),t(as.data.frame(strsplit(rownames(abund_table),"_"))))
#Apply proportion normalisation
x<-abund_table/rowSums(abund_table)
x<-x[,order(colSums(x),decreasing=TRUE)]
 
#Extract list of top N Taxa
N<-21
taxa_list<-colnames(x)[1:N]
#remove "__Unknown__" and add it to others
taxa_list<-taxa_list[!grepl("Unknown",taxa_list)]
N<-length(taxa_list)
 
#Generate a new table with everything added to Others
new_x<-data.frame(x[,colnames(x) %in% taxa_list],Others=rowSums(x[,!colnames(x) %in% taxa_list]))
 
 
#You can change the Type=grouping_info[,1] should you desire any other grouping of panels
df<-NULL
for (i in 1:dim(new_x)[2]){
  tmp<-data.frame(row.names=NULL,Sample=rownames(new_x),Taxa=rep(colnames(new_x)[i],dim(new_x)[1]),Value=new_x[,i],Type=grouping_info[,2])
  if(i==1){df<-tmp} else {df<-rbind(df,tmp)}
}
colours <- c("#F0A3FF", "#0075DC", "#993F00","#4C005C","#2BCE48","#FFCC99","#808080","#94FFB5","#8F7C00","#9DCC00","#C20088","#003380","#FFA405","#FFA8BB","#426600","#FF0010","#5EF1F2","#00998F","#740AFF","#990000","#FFFF00");
 
 
library(ggplot2)
p<-ggplot(df,aes(Sample,Value,fill=Taxa))+geom_bar(stat="identity")+facet_grid(. ~ Type, drop=TRUE,scale="free",space="free_x")
p<-p+scale_fill_manual(values=colours[1:(N+1)])
p<-p+theme_bw()+ylab("Proportions")
p<-p+ scale_y_continuous(expand = c(0,0))+theme(strip.background = element_rect(fill="gray85"))+theme(panel.margin = unit(0.3, "lines"))
p<-p+theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
p
#pdf("TAXAplot_all_biocorrosion_by_site_new_no_unclassified.pdf",height=6,width=21)
#print(p)
#dev.off()

##SS vs ship 1:1 community composition analysis
comm_comp=read.csv(">path_to_file<.csv")

#old code that didn't show error bars
#p=ggplot(data = comm_comp,aes(x = SS_taxa_percent_average,y = ship_taxa_percent_avg, colour=class, ymin=ship_taxa_percent_avg-ship_taxa_percent_SD, ymax=ship_taxa_percent_avg+ship_taxa_percent_SD, xmin=SS_taxa_percent_average-SS_taxa_percent_SD, xmax=SS_taxa_percent_average+SS_taxa_percent_SD)) + theme(text=element_text(size=10)) +
#  xlab("SS Coupon Taxa Percent Abundance")+
#  ylab("Ship taxa Percent Abundance")+
#  ggtitle("SS coupon vs Ship Community Composition Analysis Class Level")+
#  theme(plot.title = element_text(hjust = 0.5,face="bold")) + 
#    geom_point(aes(), size=4) +
    
#  geom_abline(intercept = 0, slope = 1,linetype = "dashed") 
library(tidyverse)
#new code with error bars

p=ggplot(data = comm_comp,aes(x = SS_taxa_percent_average,y = ship_taxa_percent_avg, colour=Genus))+
 geom_errorbar(aes(ymin=ship_taxa_percent_avg-ship_taxa_percent_SD, ymax=ship_taxa_percent_avg+ship_taxa_percent_SD), width=.2, size=1.2) + theme(text=element_text(size=10)) +
  
  geom_errorbarh(aes(xmin=SS_taxa_percent_average-SS_taxa_percent_SD, xmax=SS_taxa_percent_average+SS_taxa_percent_SD), height=.2, size=1.2) + theme(text=element_text(size=6)) +
  xlab("Stainless Steel Taxa Percent Abundance")+
  ylab("Ship Taxa Percent Abundance")+
#  ggtitle("SS coupon vs Ship Community Composition Analysis Class Level")+
#  theme(plot.title = element_text(hjust = 0.5,face="bold")) + 
    geom_point(aes(), size=7) +
    
  geom_abline(intercept = 0, slope = 1,size=1,linetype = "dashed") 
p=p+theme(text=element_text(size=28))
p=p + scale_color_manual(values=c("#F0A3FF", "#0075DC", "#993F00","#4C005C","#2BCE48","#FFCC99","#808080","#94FFB5","#8F7C00","#9DCC00","#C20088","#003380","#FFA405","#FFA8BB","#426600","#FF0010","#5EF1F2","#00998F","#740AFF","#990000","#FFFF00","#FF6666","#00FF00","#6666CC","#99CCCC","#0000FF"))
#for class level 1:1 plot, 16th color removed for consistency with class level taxa plot (,"#FF0010")
p
pdf("revised_1_to_1_SS_ship_comm_comp_genus_level_high_salinities_only_without_unclassifieds.pdf",height=10,width=20)
print(p)
dev.off()

##SIMPER
library(vegan)
OTU.clean<-read.csv(">path_to_file<.csv",row.names=1,check.names=FALSE)
#Transpose the data to have sample names on rows
OTU.clean<-t(OTU.clean)
meta<-read.csv(">path_to_file<.csv",row.names=1,check.names=FALSE)

simp<-simper(OTU.clean, meta$Group, permutations = 100)
summary(simp)

##indicator species analysis
#install.packages("indicspecies")
#install.packages("labdsv")
library(labdsv)
library(indicspecies)
abund_table<-read.csv(">path_to_file<.csv",row.names=1,check.names=FALSE)
#Transpose the data to have sample names on rows
abund_table<-t(abund_table)
groups = c(rep(1, 14), rep(2, 14), rep(3,14), rep(4,14), rep(5,4), rep(6,8), rep(7,3))
groups

#groups2= c(rep(1, 17), rep(2, 14), rep(3,10))
#indddval = multipatt(wetland, groups2, control = how(nperm=999))
#summary(indddval)
#head(wetland)
inddval = multipatt(abund_table, groups, control = how(nperm=999))
summary(inddval, indvalcomp=TRUE)

##FeGenie analysis
#install.packages("ggplot2")
#install.packages("reshape")
#install.packages("reshape2")
#install.packages("tidyverse")
#install.packages("argparse")
#install.packages("ggdendro")
#install.packages("ggpubr")
library(ggplot2)
library(reshape)
library(reshape2)
library(tidyverse)
library(argparse)
library(ggdendro)
library(ggpubr)
args <- commandArgs(trailingOnly = TRUE)
# Reading in output CSV file
FeGenie_heatmap_data_organized<-read.csv(">path_to_file<.csv",row.names=1,check.names=FALSE)
#FeGenie_heatmap_data_organized <- read.csv(args[1], header = FALSE)
l = length(FeGenie_heatmap_data_organized)
fegenie.t <- t(FeGenie_heatmap_data_organized[,3:l-1])
fegenie.matrix = as.matrix(fegenie.t)

colnames(fegenie.t) <- as.vector(FeGenie_heatmap_data_organized$V1)
FeGenie <- fegenie.t

#-------------data preparation
# convert to data frame
FeGenie.data <- as.data.frame(FeGenie)
#class(FeGenie.data)
#(FeGenie.data)

# ----------- melt data
FeGenie.data.melt <- melt(FeGenie.data, id.vars = 1:1)
#head(FeGenie.data.melt)

# rename columns
colnames(FeGenie.data.melt)[colnames(FeGenie.data.melt)=="variable"] <- "Iron_category"
colnames(FeGenie.data.melt)[colnames(FeGenie.data.melt)=="value"] <- "Gene_counts"

# ----------------- output files
outfile = paste(args[2], "Fegenie-dotplot.tiff", sep = "/", collapse = NULL)
tiff(outfile, units="in", width=12, height=10, res=300)

FeGenie.data.melt$Gene_counts = as.character(FeGenie.data.melt$Gene_counts)
FeGenie.data.melt$Gene_counts = as.numeric(FeGenie.data.melt$Gene_counts)

FeGenie.meta.plot <- ggplot(FeGenie.data.melt, aes(x = X, y = Iron_category, size = Gene_counts), alpha=0.7) +
  geom_point(aes(color=Iron_category)) +
  scale_size_area(max_size = 10) +
  labs(x="", y="Iron Category") +
  scale_y_discrete(labels=c("iron_aquisition-iron_uptake" = "Iron uptake", 
                            "iron_aquisition-heme_uptake" = "Heme uptake", 
                            "iron_aquisition-heme_lyase" = "Heme lyase", 
                            "iron_aquisition-siderophore_synthesis" = "Siderophore synthesis",
                            "iron_aquisition-siderophore_uptake" = "Siderophore uptake", 
                            "iron_gene_regulation" = "Iron gene regulation", 
                            "iron_oxidation" = "Iron oxidation", 
                            "iron_reduction" = "Iron reduction", 
                            "iron_storage" = "Iron storage")) +
  theme(panel.background = element_rect(fill = "white", colour = "black", size = 1, linetype = "solid"),
        panel.border = element_rect(colour="black", size=1, fill=NA),
        strip.background=element_rect(fill='white', colour='white'),
        strip.text = element_text(face="bold", size=10),
        panel.grid.major = element_line(size = 0),
        panel.grid.minor = element_line(size = 0),
        axis.text = element_text(size=12, colour="black"),
        axis.title = element_text(face="bold", size=14),
        axis.text.x = element_text(vjust = 1, angle = 45, color = "black", size = 12, hjust=1),
        legend.position="right")

FeGenie.meta.plot

dev.off()

##simplified bubble plot code
#library(tidyverse)
FeGenie_heatmap_data_organized<-read.csv(">path_to_file<.csv",row.names=1,check.names=FALSE)
#head(FeGenie_heatmap_data_organized)
p<-ggplot(FeGenie_heatmap_data_organized, aes(x = X, y = Element_Species, size = Gene_Percent), alpha=0.7) +
  geom_point(aes(color=Element_Species)) +
  scale_size_area(max_size = 10) +
  labs(x="", y="Element Species") +
#  scale_y_discrete(labels=c("iron_aquisition-iron_uptake" = "Iron uptake", 
#                            "iron_aquisition-heme_uptake" = "Heme uptake", 
#                            "iron_aquisition-heme_lyase" = "Heme lyase", 
#                            "iron_aquisition-siderophore_synthesis" = "Siderophore synthesis",
#                            "iron_aquisition-siderophore_uptake" = "Siderophore uptake", 
#                            "iron_gene_regulation" = "Iron gene regulation", 
#                            "iron_oxidation" = "Iron oxidation", 
#                            "iron_reduction" = "Iron reduction", 
#                            "iron_storage" = "Iron storage")) +
  theme(panel.background = element_rect(fill = "white", colour = "black", size = 1, linetype = "solid"),
        panel.border = element_rect(colour="black", size=1, fill=NA),
        strip.background=element_rect(fill='white', colour='white'),
        strip.text = element_text(face="bold", size=10),
        panel.grid.major = element_line(size = 0),
        panel.grid.minor = element_line(size = 0),
        axis.text = element_text(size=12, colour="black"),
        axis.title = element_text(face="bold", size=14),
        axis.text.x = element_text(vjust = 0.5, angle = 90, color = "black", size = 12, hjust=0),
        legend.position="right")
p
pdf("Hurricane_LithoGenie_bubbleplot_no_hydrogen.pdf")
print(p)
dev.off()
